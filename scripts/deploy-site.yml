---
- name: Deploy Open Doors temporary site for '{{ sitekey }}'
  hosts: all
  remote_user: "{{ remote_user }}"
  become: yes

  vars:
    repo: https://github.com/otwcode/open-doors-temp-site.git
    deploy_path: "{{ remote_path }}/{{ sitekey }}"
    puma_line: "{{ sitekey }},{{ remote_user }}"

  tasks:
  - name: Create Bundler directory
    file:
      path: "{{ remote_path }}/bundler/{{ repo_version }}"
      owner: "{{ remote_user }}"
      group: "{{ remote_group }}"
      state: directory

  - name: Read previous PID if present
    slurp:
      src: "{{ deploy_path }}/runtime/pids/unicorn.pid"
    register: previous_pid_file
    ignore_errors: yes

  - name: Kill PID if running
    action: shell kill -9 {{ previous_pid_file['content'] | b64decode }}
    ignore_errors: yes

  - name: Delete app directory if it exists to start with a clean copy
    file:
      path: "{{ deploy_path }}"
      state: absent

  - name: Create directory on Open Doors site
    file:
      path: "{{ deploy_path }}"
      owner: "{{ remote_user }}"
      group: "{{ remote_group }}"
      state: directory

  - name: Clone code from Github
    git:
      repo: "{{ repo }}"
      dest: "{{ deploy_path }}"
      depth: 1 # Don't retrieve history
      accept_hostkey: yes
      update: yes
      version: "{{ repo_version }}"

  - name: Remove .git directory so the repo can't be inadvertently updated
    file:
      path: "{{ deploy_path }}/.git"
      state: absent

  # Config
  - name: Create site config file
    template:
     src: "{{ playbook_dir }}/ansible/config.yml.j2"
     dest: "{{ deploy_path }}/config/config.yml"

  - name: Create database config file
    template:
     src: "{{ playbook_dir }}/ansible/database.yml.j2"
     dest: "{{ deploy_path }}/config/database.yml"

  - name: Copy secrets
    copy:
      src: "{{ playbook_dir }}/../config/secrets.yml"
      dest: "{{ deploy_path }}/config/secrets.yml"

  # Create folders
  - name: Create log, pid and socket folders for Unicorn #Puma
    file:
      dest: "{{ deploy_path }}/{{ item }}"
      owner: "{{ remote_user }}"
      group: "{{ remote_group }}"
      state: directory
    with_items:
      - log
      - runtime/sockets
      - runtime/pids

  - name: Update bundle
    command: bundle update
    args:
      chdir: "{{ deploy_path }}"

  - name: Install bundle
    command: bundle install --deployment --path={{ remote_path }}/bundle/{{ repo_version }}
    args:
      chdir: "{{ deploy_path }}"

  - name: Copy MySQL script
    template:
      src: "{{ playbook_dir }}/ansible/archive_config.sql.j2"
      dest: "{{ deploy_path }}/archive_config.sql"

  - name: Create MySQL database
    mysql_db:
      name: "{{ sitekey }}"
      state: present
      login_user: "{{ mysql_user }}"
      login_password: "{{ mysql_pw }}"
      login_unix_socket: "{{ mysql_socket }}"
    register: create_database

  - name: Load sample data into MySQL
    mysql_db:
      name: "{{ sitekey }}"
      state: import
      target: "{{ deploy_path }}/archive_config.sql"
      login_user: "{{ mysql_user }}"
      login_password: "{{ mysql_pw }}"
      login_unix_socket: "{{ mysql_socket }}"
    when: create_database

# TBD start unicorn on boot


  - name: Start website with unicorn
    command: RAILS_ENV=production bundle exec unicorn -D -c {{ deploy_path }}/config/unicorn.rb
    args:
      chdir: "{{ deploy_path }}"

  - name: Restart Nginx
    service:
      name: nginx
      state: restarted
      enabled: yes
