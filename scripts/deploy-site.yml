---
- name: Deploy Open Doors temporary site for '{{ sitekey }}'
  hosts: all
  remote_user: "{{ remote_user }}"
  become: yes

  vars:
    repo: https://github.com/otwcode/open-doors-temp-site.git
    deploy_path: "{{ remote_path }}/{{ sitekey }}"
    unicorn_script: unicorn_{{ sitekey }}

  tasks:
  - name: Stop app if already running
    service:
      name: "{{ unicorn_script }}"
      state: stopped
    ignore_errors: yes

  - name: Delete app directory if it exists to start with a clean copy
    file:
      path: "{{ deploy_path }}"
      state: absent

  - name: Create directory on Open Doors site
    file:
      path: "{{ deploy_path }}"
      owner: "{{ remote_user }}"
      group: "{{ remote_group }}"
      state: directory

  - name: Clone code from Github
    git:
      repo: "{{ repo }}"
      dest: "{{ deploy_path }}"
      depth: 1 # Don't retrieve history
      accept_hostkey: yes
      update: yes
      version: "{{ repo_version }}"

  - name: Remove .git directory so the repo can't be inadvertently updated
    file:
      path: "{{ deploy_path }}/.git"
      state: absent

  # Config
  - name: Create site config file
    template:
     src: "{{ playbook_dir }}/ansible/config.yml.j2"
     dest: "{{ deploy_path }}/config/config.yml"

  - name: Copy secrets
    copy:
      src: "{{ playbook_dir }}/../config/secrets.yml"
      dest: "{{ deploy_path }}/config/secrets.yml"

  # Install
  - name: Create Bundle directory 
    file:
      path: "{{ remote_path }}/../bundler/{{ repo_version }}"
      owner: "{{ remote_user }}"
      group: "{{ remote_group }}"
      state: directory
      
  - name: Update bundle
    command: bundle update
    args:
      chdir: "{{ deploy_path }}"

  - name: Install bundle
    command: bundle install --deployment --path={{ remote_path }}/../bundler/{{ repo_version }}
    args:
      chdir: "{{ deploy_path }}"

  - debug: 
      msg: ~~~~~~~  FRONT END ~~~~~~~~~~

  - name: Create Webpacker config file
    template:
     src: "{{ playbook_dir }}/ansible/webpacker.yml.j2"
     dest: "{{ deploy_path }}/config/webpacker.yml"
     
  - name: Create log, pid and socket folders for Unicorn
    file:
      dest: "{{ deploy_path }}/{{ item }}"
      owner: "{{ remote_user }}"
      group: "{{ remote_group }}"
      state: directory
    with_items:
      - log
      - runtime/sockets
      - runtime/pids
      - node_modules
      - tmp

  - name: Chmod log and node_modules directory
    file:
      dest: "{{ deploy_path }}/{{ item }}"
      group: www-data
      mode: g+rw
      recurse: yes
    with_items:
      - log
      - node_modules
      - public
      - tmp

  - name: Install NPM modules for front-end
    command: npm install --only=production
    become: false
    args:
      chdir: "{{ deploy_path }}"

  - name: Precompile assets
    command: bundle exec rake assets:precompile
    become: false
    args:
      chdir: "{{ deploy_path }}"
    environment:
      RAILS_ENV: production

  - debug: 
      msg: ~~~~~~~  DATABASE ~~~~~~~~~~

  - name: Create database config file
    template:
     src: "{{ playbook_dir }}/ansible/database.yml.j2"
     dest: "{{ deploy_path }}/config/database.yml"
    tags:
      - database

  - name: Copy MySQL script
    template:
      src: "{{ playbook_dir }}/ansible/archive_config.sql.j2"
      dest: "{{ deploy_path }}/archive_config.sql"
    tags:
      - database

  - name: Create MySQL database
    mysql_db:
      name: "{{ sitekey }}"
      state: present
      login_user: "{{ mysql_user }}"
      login_password: "{{ mysql_pw }}"
      login_unix_socket: "{{ mysql_socket }}"
    register: create_database
    tags:
      - database

  - name: Load sample data into MySQL
    mysql_db:
      name: "{{ sitekey }}"
      state: import
      target: "{{ deploy_path }}/archive_config.sql"
      login_user: "{{ mysql_user }}"
      login_password: "{{ mysql_pw }}"
      login_unix_socket: "{{ mysql_socket }}"
    when: create_database
    tags:
      - database
    
  - name: Run migrations 
    command: bundle exec rake db:migrate
    args:
      chdir: "{{ deploy_path }}"
    environment:
      RAILS_ENV: production
    tags:
      - database

  - name: Create Open Doors user for the site
    command: bundle exec rake users:create_user["Open Doors","{{ opendoors_site_user_email }}","{{ opendoors_site_user_pw }}"]
    args:
      chdir: "{{ deploy_path }}"
    environment:
      RAILS_ENV: production
    tags:
      - database

  - debug: 
      msg: ~~~~~~~ START APP ~~~~~~~~~
      
  - name: Create Unicorn script
    template:
      src: "{{ playbook_dir }}/provision/etc/init.d/unicorn_app.j2"
      dest: "/etc/init.d/unicorn_{{ sitekey }}"
      mode: 0755

  - name: Register service
    command: update-rc.d unicorn_{{ sitekey }} defaults
    ignore_errors: yes

  - name: Start Unicorn app
    service:
      name: unicorn_{{ sitekey }}
      state: started
      enabled: yes

  - name: Restart Nginx
    service:
      name: nginx
      state: restarted
      enabled: yes
