## Place all the behaviors and hooks related to the matching controller here.
## All this logic will automatically be available in application.js.
## You can use CoffeeScript in this file: http://coffeescript.org/

@debug = (data) ->
  console.log JSON.stringify(data, null, 4)


@clearAllMessages = (authorId) ->
  console.log("clear all messages")
  $("#author-" + authorId + " .message").empty()


@divClass = (status) ->
  console.log("\ndivClass")
  debug(status)
  if status in ["ok", "created", "success"]
    divClass = "alert alert-info"
  else
    divClass = "alert alert-danger"


@refreshAudit = (type, itemId) ->
  if (type? && itemId?)
    itemAudit = $("#audit-#{type}-#{itemId}")
    path = window.location.pathname
    host = window.location.protocol + "//" + window.location.host

    myRegexp = /(?:\/)(.*?)(?:\/|$)/g
    match = myRegexp.exec(path)
    sitename = match[1]
    console.log(host)
    console.log(match[1])
    $.ajax
      type: "GET"
      url: "#{host}/#{sitename}/items/audit/#{type}/#{itemId}"
      dataType: "text"

      success: (data, status, xhr) ->
        console.log("Refresh audit success")
        itemAudit.html data
        $("#info-img-#{type}-#{itemId}").attr("hidden", false)
      error: (data, status, error) ->
        console.log("Error: #{error}")
      complete : (xhr, status) ->
        console.log("complete")


@writeItemToDiv = (type, status, itemId, message, url) ->
  console.log("\ndivClass")
  debug(status)
  messageDiv = $("#" + type + "-" + itemId + " .message")
  messageDiv.html "<div class=\"#{divClass(status)}\" role=\"alert\">#{message}</div>"
  if status == "created" || status == "already_imported"
    mainDiv = $("#" + type + "-" + itemId)
    mainDiv.addClass("imported")
    importButton = $("#import-#{type}-#{itemId}")
    importButton.html "<a href=\"#{url}\" target=\"_blank\">#{url}</a>"
#    markButton = $("#item-mark-#{type}-#{itemId}")
#    markButton.text "Mark NOT imported"


@writeSummaryToDiv = (data, summaryTargetDiv, status, authorId) ->
  console.log "\nwriteSummaryToDiv"
  debug(data)
  if data && data["messages"]
    summary = data["messages"]
    summaryTargetDiv.html "<div class=\"#{divClass(status)}\" role=\"alert\">[#{authorId}] #{summary}</div>"


@processImportResponse = (data) ->
  console.log("\nprocessImportResponse")
  debug(data)
  if data.hasOwnProperty("works")
    data["works"].forEach( (item, idx) ->
      refreshAudit("story", item["original_id"])
      writeItemToDiv("story", item["status"], item["original_id"], item["messages"].join("<br/>"), item["url"])
    )
  if data.hasOwnProperty("bookmarks")
    data["bookmarks"].forEach( (item, idx) ->
      refreshAudit("bookmark", item["original_id"])
      writeItemToDiv("bookmark", item["status"], item["original_id"], item["messages"].join("<br/>"), item["url"])
    )


@bindImport = (event) ->
  link = $(event.target)
  buttonType = link.attr("data-button")
  type = link.attr("data-type")
  authorId = link.attr("data-author")
  itemId = link.attr("data-item")

  clearAllMessages(authorId)

  authorArticle = $("#author-#{authorId}")
  itemSection = $("##{type}-#{itemId}")
  summaryDiv = $("#author-" + authorId + " .author.message")

  if buttonType in ["import", "mark", "dni"]
    linkhtml = link.html()
    link.html "<img src='<%= asset_path('aloader.gif') %>' class='loading'/>"
    link.prop("disabled", true)

    $.ajax
      type: "POST"
      url: link[0]
      dataType: "json"

      success: (data, status, xhr) ->
        console.log("data before write summaryDiv")
        debug(data)

        # Reinstate button
        link.html linkhtml
        link.prop("disabled", false)

        writeSummaryToDiv(data[0], summaryDiv, status, authorId)

        switch buttonType
          when "import"
            processImportResponse(data[0], summaryDiv)

          when "dni"
            if data[0]["dni"] == true
              authorArticle.addClass("do_not_import")
              itemSection.addClass("do_not_import")
              link.text "Mark as ALLOW import"
              authorArticle.find("a[data-button='import']").hide()
              itemSection.find("a[data-button='import']").hide()
            else
              authorArticle.removeClass("do_not_import")
              itemSection.removeClass("do_not_import")
              link.text "Mark as do NOT import"
              authorArticle.find("a[data-button='import']").show()
              itemImport = itemSection.find("a[data-button='import']")
              itemImport.attr("hidden", false)
              itemImport.show()
            refreshAudit(type, itemId)

          when "mark" # Not currently enabled
            if data[0]["mark"] == true
              authorArticle.addClass("imported")
              itemSection.addClass("imported")
              link.text "Mark as NOT imported"
              $("#author-#{authorId} a[data-button='import']").hide()
              itemSection.find("a[data-button='import']").hide()
            else
              authorArticle.removeClass("imported")
              itemSection.removeClass("imported")
              link.text "Mark as imported"
              $("#author-#{authorId} a[data-button='import']").show()
              itemSection.find("a[data-button='import']").show()
            refreshAudit(type, itemId)

          else
            alert "Unknown button"

      error: (data, status, error) ->
        link.html linkhtml
        link.prop("disabled", false)

        message = "<p class=\"alert alert-danger\">An error occurred while processing the request: #{error}</p>"
        summaryDiv.html message
        itemDiv = itemSection.find(" .message")
        itemDiv.html message
        debug(data)

  else if buttonType in ["clear", "audit"]
    switch buttonType
      when "clear"
        clearAllMessages(authorId)
      when "audit"
        refreshAudit(type, id)

  else
    alert "Unknown button - something is broken!"

  event.preventDefault();
  false


$ ->
  $("body").on("click", "a[data-button]", bindImport)

  $.ajaxSetup {
    beforeSend: (xhr) ->
      xhr.setRequestHeader('X-CSRF-Token', $('meta[name="csrf-token"]').attr('content'))
  }

